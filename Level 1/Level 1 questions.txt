Level 1
Q1. Отличия хорошего пользовательского приложения от плохого с точки зрения:
  1) Клиента: Когда хорошо выполнены UI/UX. Все интуитивно понятно, быстро и хорошо работает.
  2) Менеджера проекта: Плохое, когда заказчик просит сделать вещи, которые сложно/невозможно выполнить, вещи которые убьют UI/UX.
  3) Дизайнера: Плохое, когда заказчик предлагает свой дизайн, постоянно его меняет, просит сделать элементы, которые будут отпугивать потенциальных клиентов.
  4) Верстальщика: Плохое, когда дизайнер не позаботился о верстальщике, и сделал дизайн близкий к невозможному для верстки.
5) Серверного программиста: Плохо, когда плохо налажены зависимости данных. Существуют дыры для отправки sql-инъекций в формах.

Q2. Особенности разработки:
1)	Разделение на бэк и фронт.
2)	Использование сборщиков
3)	Написание поддерживаемого, независимого кода
4)	Использование паттернов разработки
5)	Использование гита(первоначальная реализация на локале, -> заливка на stage -> development -> pred production -> testing -> production)
6)	Определенный воркфлоу (таск приходит от пма, оценка, реализация)
Q3. Presentational Components – отвечают за вывод данных. Container Components – для получения данных от сервера.
Из плюсов: четкое разделение зон ответственности, возможность повторного использования кода.
Из минусов: может быть трудно разобраться в иерархии новому разработчику.

Q4. Наследование реализовано прототипами. У каждого нового элемента всегда есть базовый прототип (Object.prototype, String.prototype и т.д), от которого он наследует методы (свойства, т.к в JS не стандартная модель ООП).
Если у объекта вызывается какой-либо метод, он ищется сперва в нем, если не находится, то в его прототипе и так далее, до базового прототипа, если он не был отвязан.
Любому прототипу можно добавить свои методы, но это не рекомендуется делать с базовыми прототипами.

Q5. К сожалению, я не знаю какие библиотеки можно использовать. Тесты пока не писал, но нужны они для определения работоспособности кода, после изменений.
Также существует паттерн разработки, когда сперва пишутся тесты, а затем код под них, до тех пока все тесты не будут выполнены.

Q6. Указал бы количество шагов внизу формы, валидация инпутов на js, настройка фокусов. Посоветовался бы с дизайнером насчет динамики.

Q7. Большую часть проблем решает phpstorm, emmet, linter. Если хочу что-то быстро проверить использую codepen.io. Для быстрого написания стилей SASS или LESS.

Q8. Очень много читаю. В данный момент читаю Eloquent Javascript. Решаю каты на codewars. Прошел большую часть челенджей на freecodecamp. Также хабр, тостер, хекслет. Видео с различных JavaScript презентаций. Слежу за ютуб каналом senior software vlogger.

Q9. Начинающий JS разработчик, желающий стать востребованным специалистом, для которого event loop не пустой звук. Большую часть своего свободного времени занимаюсь саморазвитием. Если за день что-то не прочту или не посмотрю, касающееся программирования, чувствую, будто прожил день зря.
Опыт работы полгода, из которых 3 месяца на JS. Быстро осваиваю любой материал, что сильно упрощает обучение.
Очень хочу попасть в вашу компанию, так, как и набор инструментов, и возможности роста именно такие, как я бы и хотел.
В свою очередь, гарантирую полную самоотдачу и результативность. Каких-то серьезных работ по JS не делал, только решение алгоритмов, а по работе давали либо реализовать табы, слайдеры и тд, либо верстка и правки стилей, а это не совсем то, что даст мне рост, как полноценному JavaScript разработчику.
https://github.com/hichigo213 Ссылка на мои работы.

Спасибо за внимание!
